---
title: "Context is King"
author: "Shannon Pileggi"
footer:  ""
logo: "images/pngtree_crown.png"
editor: source
format: 
  revealjs: 
    theme: [default, slides.scss]
    transition: fade
    slide-number: true
    margin: 0.1
execute:
  echo: true
  output: asis
  freeze: auto
---

# The setting {.inverse}

## An email

```{r}
#| echo: false
library(gtsummary)
library(gt)
source("nycflights-delay-demo.R")
```

. . .

<br>

Hi Shannon -

I see Travis is out on vacation.
Can you re-run the flight delay report?
Please walk us through the numbers at the next nycflights project meeting.

Thanks,

Sarah

Director of Flight Operations

## {.center}


<iframe src="https://giphy.com/embed/7NoNw4pMNTvgc" width="550" height="550" style frameBorder="0" class="giphy-embed" allowFullScreen>

</iframe>


::: footer
<p><a href="https://giphy.com/gifs/content-7NoNw4pMNTvgc">via GIPHY</a></p>
:::

## Success ðŸŽ‰

<br>

```{r}
#| echo: false
t1_unlabelled <- flights_delay |>
  select(name, delay_category) |>
  tbl_summary(
    by = name
  ) |>  
  modify_header(all_stat_cols() ~ "**{level}**  <br>N = {style_number(n)}") 

t1_unlabelled
```

## The email

<br>

Hi Shannon -

I see Travis is out on vacation.
Can you re-run the flight delay report?
Please **walk us through the numbers** at the next nycflights project meeting.

Thanks,

Sarah

Director of Flight Operations

## Walk through the numbers

<br>

:::: {.columns} 
::: {.column}
56% of flights...
```{r}
#| echo: false
t1_unlabelled |> 
  as_gt() |> 
  tab_style(
    style = list(
      cell_fill(color = "#FFFBC8")
      ),
    locations = cells_body(rows = 2, columns = "stat_1")
  )
```
:::

::: {.column .fragment}

<br>

::: {.fragment}
departing from JFK 

departed early
:::

<br>

::: {.fragment}
arriving at JFK

arrived early  


::: {.largest}
ðŸ˜¬ðŸ˜±
:::
:::



:::
::::

## {transition="fade"}

<br>

:::: {.columns}
::: {.column}
```{r}
#| echo: false
t1_unlabelled|> 
  as_gt() |> 
  tab_style(
    style = list(
      cell_fill(color = "#FFFBC8")
      ),
    locations = cells_body(rows = 1, columns = "label")
  )
```
:::

::: {.column}
<img src="https://en.meming.world/images/en/1/17/Monkey_Puppet.jpg"/>
:::
::::

## 

![](images/travis_yolo.png)

## {background-image="images/pexels-pixabay-39868.jpg" background-size=38% background-repeat=no-repeat background-position=right}



::: {style="text-align: right;" .larger .absolute right="38%"}
<br>

A journey to understand 

<br>

source data &

downstream variables
:::


::: footer
[Photo by Pixabay from Pexels](https://www.pexels.com/photo/green-vines-39868/)
:::

# Data stewardship {.inverse}

## The code

. . .

<br>
```{r}
#| code-line-numbers: "1,4"
#| eval: FALSE
flights_delay <- flights |>
  select(origin, dest, arr_delay, dep_delay) |>
  left_join(
    select(airports, faa, name),
    join_by(origin == faa)
    ) |>
  mutate(
    delay_category = case_when(
      dep_delay < 0 ~ "Early",
      dep_delay == 0 ~ "On time",
      dep_delay > 0 ~ "Late"
    ) |> fct_relevel("Early", "On time", "Late")
  ) 
```


## nycflights13

![](images/relational-nycflights.png)

::: foot
<https://r4ds.had.co.nz/relational-data.html>
:::

## Source data I work with

![](images/data-1.svg)

## Source data I work with

![](images/data-2.svg)


## Source data I work with

![](images/data-3.svg)

## Source data context

::: columns
::: column
`View(flights)`
![](images/flights_view_unlabelled.png)
:::

::: column
`?flights`
![](images/flights_help.png)
:::
:::

## Source data context

:::: {.columns}
::: {.column}
`View(flights)`
![](images/flights_view_unlabelled.png)
:::

::: {.column}
`External excel file`
![](images/flights_dictionary_excel.png)
:::
::::

## Source data context <ins>can</ins> and <ins>should</ins> be embedded in your data

. . .

`View(flights_labelled)`
![](images/flights_view_labelled.png)

::: {.fragment .absolute right="2%" bottom="5%"}

![](images/paul-rudd-double-take.gif){width="200"}

::: footer
[via GIPHY](https://giphy.com/gifs/double-take-shocked-paul-rudd-K0Mmal97YNYkw)
:::

:::


## 

![](images/timeline-1.svg)

::: notes
source for image in google slides at

https://docs.google.com/presentation/d/1tM76oC-HhcGOPJgYGezV1pW56Rh4w2qaTdL8cczETX0/edit#slide=id.g2eeea21208f_0_36
:::

## 

![](images/timeline-2.svg)

## 

![](images/timeline-3.svg)

## Assigning variable labels

```{r}
#| eval: FALSE
flights_labelled <- flights |>
  labelled::set_variable_labels(
    year  = "Flight year of departure",
    month = "Flight month of departure",
    ...
  )
```

. . .

<br>

```{r}
#| eval: FALSE
flights_labelled <- flights
attr(flights_labelled$year,  "label") <- "Flight year of departure"
attr(flights_labelled$month, "label") <- "Flight month of departure"
...
```

<br>

. . .

:::: {.columns}

::: {.column width="30%"}
Further reading
:::

::: {.column width="70%"}
[The case for variable labels in R](https://www.pipinghotdata.com/posts/2022-09-13-the-case-for-variable-labels-in-r/) 

[Advanced R, Ch 3.3 Attributes](https://adv-r.hadley.nz/vectors-chap.html?q=attributes#attributes)
:::

::::

## Viewing labelled data

:::: {.columns}

::: {.column width="50%"}
`View(flights)`
![](images/flights_view_unlabelled.png)
:::

::: {.column width="50%"}
`View(flights_labelled)`
![](images/flights_view_labelled_less.png)
:::

::::


## Identifying downstream context

. . .

```{r}
#| code-line-numbers: "5,9"
#| eval: FALSE
flights_delay <- flights |>
  select(origin, dest, arr_delay, dep_delay) |>
  left_join(
    select(airports, faa, name),
    join_by(origin == faa)
    ) |>
  mutate(
    delay_category = case_when(
      dep_delay < 0 ~ "Early",
      dep_delay == 0 ~ "On time",
      dep_delay > 0 ~ "Late"
    ) |> fct_relevel("Early", "On time", "Late")
  )  
```

. . .

`delay_category` represents 

_Departure delay by origin airport_

## Downstream data context <ins>can</ins> and <ins>should</ins> be embedded in your data

:::: {.columns}

::: {.column width="65%"}

```{r}
#| code-line-numbers: "14,15,16"
#| eval: FALSE
flights_delay_labelled <- flights_labelled |>
  select(origin, dest, arr_delay, dep_delay) |>
  left_join(
    select(airports_labelled, faa, name),
    join_by(origin == faa)
    ) |>
  mutate(
    delay_category = case_when(
      dep_delay < 0 ~ "Early",
      dep_delay == 0 ~ "On time",
      dep_delay > 0 ~ "Late"
    ) |> fct_relevel("Early", "On time", "Late")
  )  |>
  labelled::set_variable_labels(
    delay_category = "Departure delay by origin airport",
    name = "Origin airport"
  )
```
:::

::: {.column width="35%"}

![](images/flights_delay_view_labelled.png){width="100%"}

:::

::::

## {background-image="images/jared-rice-NTyBbu66_SI-unsplash.jpg" background-size=35% background-repeat=no-repeat background-position=left} 

:::: {.columns}

::: {.column width="33%"}

:::

::: {.column width="67%"}


Assigning variable labels encourages a **disciplined practice** of creating explicit
and succinct variable descriptions, ensuring that **data context lives with the data**. 

::: {.fragment} 

<br>

This helps: 

* current you, future you, & colleagues

* peer review processes

* creation of reusable data assets
:::
:::

::::

::: footer
Photo by <a href="https://unsplash.com/@jareddrice?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Jared Rice</a> on <a href="https://unsplash.com/photos/woman-doing-yoga-meditation-on-brown-parquet-flooring-NTyBbu66_SI?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
:::



# Applications {.inverse}

## Data dictonary

:::: {.columns}

::: {.column width="50%"}

```{r}
#| code-line-numbers: "1-7|10"
#| eval: FALSE
flights_schema <- tibble::lst(
  airlines_labelled,
  airports_labelled,
  flights_labelled,
  planes_labelled,
  weather_labelled
)

flights_dictionary <- flights_schema |>
  map(labelled::generate_dictionary) |>
  enframe() |>
  unnest(cols = value)
```

:::

::: {.column .fragment width="50%"}
`View(flights_dictionary)`
![](images/flights_dictionary.gif)
:::

::::


## Figures, unlabelled


```{r}
#| code-line-numbers: "1"
flights_delay_labelled |>
  ggplot(aes(x = name, fill = delay_category)) +
  geom_bar()
```

## Figures, labelled

```{r}
#| code-line-numbers: "1,4"
flights_delay_labelled |>
  ggplot(aes(x = name, fill = delay_category)) +
  geom_bar() +
  ggeasy::easy_labs() 
```


## Tabling, unlabelled

```{r}
#| eval: FALSE
#| code-line-numbers: "1,3"
flights_delay |>
  select(name, delay_category) |>
  gtsummary::tbl_summary(
    by = name
  ) 
```


```{r}
#| echo: FALSE
t1_unlabelled |> 
  as_gt() |> 
  tab_style(
    style = list(
      cell_fill(color = "#FFFBC8")
      ),
    locations = cells_body(rows = 1, columns = "label")
  )
```


## Tabling, labelled

```{r}
#| eval: FALSE
#| code-line-numbers: "1,3"
flights_delay_labelled |>
  select(name, delay_category) |>
  gtsummary::tbl_summary(
    by = name
  ) 
```


```{r}
#| echo: FALSE
flights_delay_labelled |>
  select(name, delay_category) |>
  tbl_summary(
    by = name
  ) |>  
  modify_header(all_stat_cols() ~ "**{level}**  <br>N = {style_number(n)}") |> 
  as_gt() |> 
  tab_style(
    style = list(
      cell_fill(color = "#FFFBC8")
      ),
    locations = cells_body(rows = 1, columns = "label")
  )
```

# Wrap up {.inverse}

## Summary 

Variable labels

* are visible in the RStudio IDE data viewer

* can be efficiently leveraged in data products (eg., figures, tables)

* are used in an array of packages (`haven`, `labelled`, `sjlabelled`, `gtsummary`, `ggeasy`, `Hmisc`, etc.)

Explicitly defining variable labels creates readily understood and reusable data assets


## Resources {.small}

* (2024\) nycflights13 demo script <br>
<https://github.com/shannonpileggi/context-is-king/blob/main/nycflights-delay-demo.R>{style="font-size:0.8em;"}

* (2022\) The case for variable labels in R <br> <https://www.pipinghotdata.com/posts/2022-09-13-the-case-for-variable-labels-in-r/>{style="font-size:0.8em;"} 

* (2020\) Leveraging labelled data in R <br> <https://www.pipinghotdata.com/posts/2020-12-23-leveraging-labelled-data-in-r/>{style="font-size:0.8em;"}

::: {.fragment}

* (2019\) Advanced R 2e, Ch 3.3 Attributes <br> <https://adv-r.hadley.nz/vectors-chap.html?q=attributes#attributes>{style="font-size:0.8em;"}

* (2015\) Commit that introduced labels to the RStudio IDE data viewer <br>
<https://github.com/rstudio/rstudio/commit/92026abeb9d9ee7a05bdf30a81a5f4d919ea438e>{style="font-size:0.8em;"}

:::

::: {.fragment}

* (2024\) Positron issue to display column labels in data explorer ðŸ˜‡<br>
<https://github.com/posit-dev/positron/issues/2971>{style="font-size:0.8em;"}

:::

## Cheers to variable labels ðŸ¥‚ 

Thank you to the **many** individuals who have helped me work with variable 
labels, and provided feedback on both the abstract 
submission and the development of this talk. Your support was invaluable.

. . .

:::: {.columns} 

::: {.column width="40%"}

![](images/team_chicago.jpg)
:::

::: {.column width="60%"}
<br>
Travis consented use of his name; I assure you he always labels his variables. ðŸ˜œ
:::

::::


